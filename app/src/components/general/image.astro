---
import { getImgProps, type ImageLoader } from '@app/lib/image';
import type { AstroReactElement } from '@app/types';
import type { CommonSchemaType } from '@app/types/content';

export const QUALITY_DEFAULT = 75;

export type SanityImage = CommonSchemaType<'image'>;

export interface Props extends AstroReactElement<'img'> {
  loader: ImageLoader;
  decorative?: boolean;
}

export type { ImageLoader } from '@app/lib/image';

const {
  class: className,
  src,
  alt,
  decorative,
  loader,
  width,
  height,
  ...rest
} = Astro.props;
---

{
  (src && (
    <img
      {...rest}
      class:list={['img', className]}
      decoding='async'
      loading='lazy'
      role={decorative ? 'presentation' : undefined}
      alt={decorative ? '' : alt}
      {...getImgProps({
        sizes: rest.sizes || undefined,
        src,
        loader,
        quality: QUALITY_DEFAULT,
        width: (width && Number(width)) || undefined,
        height: (height && Number(height)) || undefined,
      })}
    />
  )) ||
    null
}

<style>
  img {
    display: block;
    width: 100%;
    height: auto;
    color: transparent;
    transition-property: opacity;
    transition-duration: 250ms;
    opacity: 0;
  }

  img[data-loaded] {
    opacity: 1;
  }
</style>

<script>
  const images = document.querySelectorAll('img');

  const onImageLoaded = (image: HTMLImageElement) => () => {
    image.setAttribute('data-loaded', '');
  };

  images.forEach((image) => {
    const handleLoaded = onImageLoaded(image);
    image.addEventListener('load', handleLoaded);
    if (image.complete) handleLoaded();
  });
</script>
