---
import type { HTMLAttributes } from 'astro/types';
import _ from 'lodash';

import { getImgProps } from '@app/lib/image';
import Image, {
  QUALITY_DEFAULT,
  type Props as ImageProps,
} from '@app/components/astro/general/image.astro';
import { Picture as SolidPicture } from '@app/components/solid/general/picture';

const { orderBy } = _;

export type PictureImage = {
  src: string;
  width: number;
  height: number;
  max?: number;
};

export interface Props
  extends HTMLAttributes<'picture'>,
    Pick<ImageProps, 'alt' | 'loader'> {
  images: PictureImage[];
  sizes?: string;
}

const { class: className, images, alt, loader, sizes } = Astro.props;

const defaultImage =
  images.find(({ max }) => !max) || images[images.length - 1];

const imageProps = (image: PictureImage) => {
  const { src, width, height } = image;

  return getImgProps({
    quality: QUALITY_DEFAULT,
    loader,
    sizes,
    src,
    width,
    height,
  });
};

const defaultImageProps = imageProps(defaultImage);
//backupSrc
---

{
  images.length === 1 ? (
    <Image {...images[0]} class={className} {alt} {loader} {sizes} />
  ) : (
    <SolidPicture
      class={className || undefined}
      client:load
      image={defaultImageProps}
      sources={orderBy(images, 'max', 'asc').map(({ max, ...image }) => {
        const { srcSet, width, height } = imageProps(image);
        return {
          sizes,
          width,
          height,
          media: max ? `(max-width: ${max - 1}px)` : undefined,
          srcSet,
        };
      })}
    />
  )
}
