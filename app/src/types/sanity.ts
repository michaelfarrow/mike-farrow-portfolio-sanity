/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Album = {
  _id: string;
  _type: "album";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  date?: string;
  location?: Geopoint;
  photos?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    location?: Geopoint;
    _type: "photo";
    _key: string;
  }>;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  date?: string;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  thumbnail?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  description?: string;
  descriptionLong?: string;
  content?: Array<{
    name?: string;
    span?: "half" | "full";
    content?: Array<{
      content?: string;
      _type: "md";
      _key: string;
    } | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      caption?: string;
      _type: "image";
      _key: string;
    } | {
      main?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        caption?: string;
        _type: "image";
      };
      alternative?: Array<{
        image?: {
          asset?: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
          };
          hotspot?: SanityImageHotspot;
          crop?: SanityImageCrop;
          _type: "image";
        };
        breakpoint?: "mobile" | "tablet";
        _key: string;
      }>;
      _type: "responsiveImage";
      _key: string;
    } | {
      url?: string;
      poster?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      alt?: string;
      caption?: string;
      _type: "video";
      _key: string;
    }>;
    _type: "item";
    _key: string;
  }>;
  client?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "contact";
  };
  attributions?: Array<{
    name?: string;
    contacts?: Array<{
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      _key: string;
      [internalGroqTypeReferenceTo]?: "contact";
    }>;
    _type: "attribution";
    _key: string;
  }>;
  hideFromSearchEngines?: boolean;
  private?: boolean;
};

export type Contact = {
  _id: string;
  _type: "contact";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  type?: "company" | "individual" | "institution";
  link?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "link";
  };
};

export type Link = {
  _id: string;
  _type: "link";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  shortName?: string;
  url?: string;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  description?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Common = {
  _type: "common";
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  };
  decorativeImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  responsiveImage?: {
    main?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      caption?: string;
      _type: "image";
    };
    alternative?: Array<{
      image?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      breakpoint?: "mobile" | "tablet";
      _key: string;
    }>;
  };
  video?: {
    url?: string;
    poster?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    alt?: string;
    caption?: string;
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Markdown = string;

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Album | Geopoint | Project | Contact | Link | Category | Slug | Common | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Markdown;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: src/lib/sanity/queries/album.ts
// Variable: albumsQuery
// Query: *[_type == "album"] {    _id,    slug,    name  }
export type AlbumsQueryResult = Array<{
  _id: string;
  slug: Slug | null;
  name: string | null;
}>;
// Variable: albumQuery
// Query: *[    _type == "album" &&    slug.current == $slug  ][0] {    name,    photos[]   {      _key,  alt,  caption,  crop,  hotspot,    asset -> {        url,      metadata {          dimensions {    width,    height  },        image,        exif      }    }  }  }
export type AlbumQueryResult = {
  name: string | null;
  photos: Array<{
    _key: string;
    alt: string | null;
    caption: string | null;
    crop: SanityImageCrop | null;
    hotspot: SanityImageHotspot | null;
    asset: {
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
        image: null;
        exif: null;
      } | null;
    } | null;
  }> | null;
} | null;

// Source: src/lib/sanity/queries/project.ts
// Variable: projectsQuery
// Query: *[_type == "project"] {    _id,    slug,    name,    description  }
export type ProjectsQueryResult = Array<{
  _id: string;
  slug: Slug | null;
  name: string | null;
  description: string | null;
}>;
// Variable: projectQuery
// Query: *[    _type == "project" &&    slug.current == $slug  ][0] {    _id,    _type,    name,    description,    descriptionLong,    thumbnail   {      _key,  alt,  caption,  crop,  hotspot,    asset -> {        url,      metadata {          dimensions {    width,    height  }      }    }  },    content[] {        _key,  _type,      span,      content[] {            _key,  _type,  _type == "image" =>   {      _key,  alt,  caption,  crop,  hotspot,    asset -> {        url,      metadata {          dimensions {    width,    height  }      }    }  },  _type == "responsiveImage" =>   {    main   {      _key,  alt,  caption,  crop,  hotspot,    asset -> {        url,      metadata {          dimensions {    width,    height  }      }    }  },    alternative[] {      breakpoint,      image   {      _key,  alt,  caption,  crop,  hotspot,    asset -> {        url,      metadata {          dimensions {    width,    height  }      }    }  },    }  },  _type == "video" =>   {    url,    poster   {      _key,  alt,  caption,  crop,  hotspot,    asset -> {        url,      metadata {          dimensions {    width,    height  }      }    }  },    alt,    caption  },  _type == "richText" => {    ...  },  _type == "md" => {    ...  },  _type == "temp" => {    names[] {      ...    }  }      },    },    attributions[] {      _key,      name,      contacts[]{        _key,        ...(@->{          _id,          name        })      }    },    private,    hideFromSearchEngines  }
export type ProjectQueryResult = {
  _id: string;
  _type: "project";
  name: string | null;
  description: string | null;
  descriptionLong: string | null;
  thumbnail: {
    _key: null;
    alt: string | null;
    caption: null;
    crop: SanityImageCrop | null;
    hotspot: SanityImageHotspot | null;
    asset: {
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
  } | null;
  content: Array<{
    _key: string;
    _type: "item";
    span: "full" | "half" | null;
    content: Array<{
      _key: string;
      _type: "image";
      alt: string | null;
      caption: string | null;
      crop: SanityImageCrop | null;
      hotspot: SanityImageHotspot | null;
      asset: {
        url: string | null;
        metadata: {
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
    } | {
      _key: string;
      _type: "md";
      content?: string;
    } | {
      _key: string;
      _type: "responsiveImage";
      main: {
        _key: null;
        alt: string | null;
        caption: string | null;
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        asset: {
          url: string | null;
          metadata: {
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
      alternative: Array<{
        breakpoint: "mobile" | "tablet" | null;
        image: {
          _key: null;
          alt: null;
          caption: null;
          crop: SanityImageCrop | null;
          hotspot: SanityImageHotspot | null;
          asset: {
            url: string | null;
            metadata: {
              dimensions: {
                width: number | null;
                height: number | null;
              } | null;
            } | null;
          } | null;
        } | null;
      }> | null;
    } | {
      _key: string;
      _type: "video";
      url: string | null;
      poster: {
        _key: null;
        alt: null;
        caption: null;
        crop: SanityImageCrop | null;
        hotspot: SanityImageHotspot | null;
        asset: {
          url: string | null;
          metadata: {
            dimensions: {
              width: number | null;
              height: number | null;
            } | null;
          } | null;
        } | null;
      } | null;
      alt: string | null;
      caption: string | null;
    }> | null;
  }> | null;
  attributions: Array<{
    _key: string;
    name: string | null;
    contacts: Array<{
      _key: string;
      _id: string;
      name: string | null;
    }> | null;
  }> | null;
  private: boolean | null;
  hideFromSearchEngines: boolean | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"album\"] {\n    _id,\n    slug,\n    name\n  }\n": AlbumsQueryResult;
    "\n  *[\n    _type == \"album\" &&\n    slug.current == $slug\n  ][0] {\n    name,\n    photos[] \n  {\n    \n  _key,\n  alt,\n  caption,\n  crop,\n  hotspot\n,\n    asset -> {\n      \n  url\n,\n      metadata {\n        \n  dimensions {\n    width,\n    height\n  }\n,\n        image,\n        exif\n      }\n    }\n  }\n\n  }\n": AlbumQueryResult;
    "\n  *[_type == \"project\"] {\n    _id,\n    slug,\n    name,\n    description\n  }\n": ProjectsQueryResult;
    "\n  *[\n    _type == \"project\" &&\n    slug.current == $slug\n  ][0] {\n    _id,\n    _type,\n    name,\n    description,\n    descriptionLong,\n    thumbnail \n  {\n    \n  _key,\n  alt,\n  caption,\n  crop,\n  hotspot\n,\n    asset -> {\n      \n  url\n,\n      metadata {\n        \n  dimensions {\n    width,\n    height\n  }\n\n      }\n    }\n  }\n,\n    content[] {\n      \n  _key,\n  _type\n,\n      span,\n      content[] {\n        \n  \n  _key,\n  _type\n,\n  _type == \"image\" => \n  {\n    \n  _key,\n  alt,\n  caption,\n  crop,\n  hotspot\n,\n    asset -> {\n      \n  url\n,\n      metadata {\n        \n  dimensions {\n    width,\n    height\n  }\n\n      }\n    }\n  }\n,\n  _type == \"responsiveImage\" => \n  {\n    main \n  {\n    \n  _key,\n  alt,\n  caption,\n  crop,\n  hotspot\n,\n    asset -> {\n      \n  url\n,\n      metadata {\n        \n  dimensions {\n    width,\n    height\n  }\n\n      }\n    }\n  }\n,\n    alternative[] {\n      breakpoint,\n      image \n  {\n    \n  _key,\n  alt,\n  caption,\n  crop,\n  hotspot\n,\n    asset -> {\n      \n  url\n,\n      metadata {\n        \n  dimensions {\n    width,\n    height\n  }\n\n      }\n    }\n  }\n,\n    }\n  }\n,\n  _type == \"video\" => \n  {\n    url,\n    poster \n  {\n    \n  _key,\n  alt,\n  caption,\n  crop,\n  hotspot\n,\n    asset -> {\n      \n  url\n,\n      metadata {\n        \n  dimensions {\n    width,\n    height\n  }\n\n      }\n    }\n  }\n,\n    alt,\n    caption\n  }\n,\n  _type == \"richText\" => {\n    ...\n  },\n  _type == \"md\" => {\n    ...\n  },\n  _type == \"temp\" => {\n    names[] {\n      ...\n    }\n  }\n\n      },\n    },\n    attributions[] {\n      _key,\n      name,\n      contacts[]{\n        _key,\n        ...(@->{\n          _id,\n          name\n        })\n      }\n    },\n    private,\n    hideFromSearchEngines\n  }\n": ProjectQueryResult;
  }
}
